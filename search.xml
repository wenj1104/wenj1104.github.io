<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Build Origin]]></title>
    <url>%2F2018%2F10%2F17%2Fbuild-origin-rpms%2F</url>
    <content type="text"><![CDATA[编译openshift origin3.11或者更高版本，并部署一个三节点的集群 嘻嘻安装必要的包这里是从https://github.com/openshift/origin/blob/master/CONTRIBUTING.adoc里复制过来的。不知道有些包是不是用不到，但是避免麻烦，就直接一并安装了。需要注意的是，没有安装golang相关的包。1$ yum install -y make gcc zip mercurial krb5-devel bsdtar bc rsync bind-utils file jq tito createrepo openssl gpgme gpgme-devel libassuan libassuan-devel subversion包会在下面安装golang的时候用到1$ yum install -y subversion 这两个包会在编译的时候用到，不装会依赖报错。goversioninfo这个包在origin的源里。只需要goversioninfo这个包，所以include一下。123456789$ vim /etc/yum.repos.d/origin.repo[origin]name=originbaseurl=http://mirror.centos.org/centos/7/paas/x86_64/openshift-origin/enabled=1gpgcheck=0includepkgs = goversioninfo$ yum install -y rpm-build goversioninfo 安装golang因为编译origin3.11甚至更高，需要golang1.10以上。而大多数安装的golang的方法，是通过下载go1.11.linux-amd64.tar.gz这种类似的压缩包来解压安装。但是这种安装方法，最后rpm -q golang的时候，不会有输出。但是编译origin，需要的是安装golang这个包。这个很重要。golang这个包，本来是可以通过yum的方式来安装，但是目前的yum源里，最高就是1.9x，不符合编译要求。所以就需要在网上找golang的rpm包来进行golang的安装。不然会出现以下错误12345678910OS_ONLY_BUILD_PLATFORMS=&apos;linux/amd64&apos; hack/build-rpms.sh[INFO] Building release RPMs for /root/go/src/openshift/origin/origin.spec ...error: Failed build dependencies: golang &gt;= 1.10 is needed by origin-3.11.0-0.alpha.0.1282.2a86335.x86_64[ERROR] PID 1976: hack/build-rpms.sh:78: `rpmbuild -b$&#123;srpm&#125; &quot;$&#123;OS_RPM_SPECFILE&#125;&quot; --define &quot;skip_dist 1&quot; --define &quot;make_redistributable $&#123;make_redistributable&#125;&quot; --define &quot;version $&#123;OS_RPM_VERSION&#125;&quot; --define &quot;release $&#123;OS_RPM_RELEASE&#125;&quot; --define &quot;commit $&#123;OS_GIT_COMMIT&#125;&quot; --define &quot;os_git_vars $&#123;OS_RPM_GIT_VARS&#125;&quot; --define &apos;dist .el7&apos; --define &quot;_topdir $&#123;rpm_tmp_dir&#125;&quot;` exited with status 1.[INFO] Stack Trace:[INFO] 1: hack/build-rpms.sh:78: `rpmbuild -b$&#123;srpm&#125; &quot;$&#123;OS_RPM_SPECFILE&#125;&quot; --define &quot;skip_dist 1&quot; --define &quot;make_redistributable $&#123;make_redistributable&#125;&quot; --define &quot;version $&#123;OS_RPM_VERSION&#125;&quot; --define &quot;release $&#123;OS_RPM_RELEASE&#125;&quot; --define &quot;commit $&#123;OS_GIT_COMMIT&#125;&quot; --define &quot;os_git_vars $&#123;OS_RPM_GIT_VARS&#125;&quot; --define &apos;dist .el7&apos; --define &quot;_topdir $&#123;rpm_tmp_dir&#125;&quot;`[INFO] Exiting with code 1.[ERROR] hack/build-rpms.sh exited with code 1 after 00h 00m 16smake: *** [build-rpms] Error 1 下面四个包下载后安装，后面三个是第一个包所需要的依赖包。12345$ wget cbs.centos.org/kojifiles/packages/golang/1.10.2/1.el7/x86_64/golang-1.10.2-1.el7.x86_64.rpm$ wget cbs.centos.org/kojifiles/packages/golang/1.10.2/1.el7/noarch/golang-src-1.10.2-1.el7.noarch.rpm$ wget cbs.centos.org/kojifiles/packages/go-srpm-macros/2/3.el7/noarch/go-srpm-macros-2-3.el7.noarch.rpm$ wget cbs.centos.org/kojifiles/packages/golang/1.10.2/1.el7/x86_64/golang-bin-1.10.2-1.el7.x86_64.rpm$ rpm -ivh *.rpm 一定要看到这样的结果12# rpm -q golanggolang-1.10.2-1.el7.x86_64 配置go环境12345678$ mkdir /root/go# 添加下面两行$ vim /etc/profileexport GOPATH=/root/goexport PATH=$PATH:$GOPATH/bin$ source /etc/profile 准备编译git clone的时候，想编译哪个版本的origin，就指定哪个分支编译的机器(centos7)至少4cpu、8Gmem12345678910111213141516171819202122$ mkdir -p /root/go/src/openshift$ cd /root/go/src/openshift$ git clone -b release-3.11 https://github.com/openshift/origin.git$ cd origin$ make build-rpms$ ll /root/go/src/openshift/origin/_output/local/releases/rpms/total 188240-rw-r--r--. 1 root root 168 Oct 1 09:49 local-release.repo-rw-r--r--. 1 root root 37719224 Oct 1 09:48 origin-3.11.0-0.alpha.0.1282.2a86335.x86_64.rpm-rw-r--r--. 1 root root 23326832 Oct 1 09:49 origin-clients-3.11.0-0.alpha.0.1282.2a86335.x86_64.rpm-rw-r--r--. 1 root root 3792 Oct 1 09:49 origin-docker-excluder-3.11.0-0.alpha.0.1282.2a86335.noarch.rpm-rw-r--r--. 1 root root 3752 Oct 1 09:49 origin-excluder-3.11.0-0.alpha.0.1282.2a86335.noarch.rpm-rw-r--r--. 1 root root 35864944 Oct 1 09:48 origin-hyperkube-3.11.0-0.alpha.0.1282.2a86335.x86_64.rpm-rw-r--r--. 1 root root 36633892 Oct 1 09:48 origin-hypershift-3.11.0-0.alpha.0.1282.2a86335.x86_64.rpm-rw-r--r--. 1 root root 168 Oct 1 09:49 origin-local-release.repo-rw-r--r--. 1 root root 2172 Oct 1 09:48 origin-master-3.11.0-0.alpha.0.1282.2a86335.x86_64.rpm-rw-r--r--. 1 root root 6435652 Oct 1 09:48 origin-node-3.11.0-0.alpha.0.1282.2a86335.x86_64.rpm-rw-r--r--. 1 root root 427864 Oct 1 09:49 origin-pod-3.11.0-0.alpha.0.1282.2a86335.x86_64.rpm-rw-r--r--. 1 root root 4249372 Oct 1 09:49 origin-sdn-ovs-3.11.0-0.alpha.0.1282.2a86335.x86_64.rpm-rw-r--r--. 1 root root 13460052 Oct 1 09:49 origin-template-service-broker-3.11.0-0.alpha.0.1282.2a86335.x86_64.rpm-rw-r--r--. 1 root root 34590844 Oct 1 09:48 origin-tests-3.11.0-0.alpha.0.1282.2a86335.x86_64.rpmdrwxr-xr-x. 2 root root 4096 Oct 1 09:49 repodata 做个仓库将/root/go/src/openshift/origin/_output/local/releases/rpms/目录下的东西全部拷贝，做个仓库 部署集群以三节点的环境为例（1master+1infraNode+1computeNode）装包，需要注意的是，装origin3.11需要ansible的版本是2.6.5以上以及2.7以下，所以单独创建个repo文件用来装ansible-2.6.5这个网址从ansible2.4-2.7都有，装origin4.0版本需要ansible-2.712345678$ vim ansible.repo[ansible-repo]name = ansible-repobaseurl = http://releases.ansible.com/ansible/rpm/release/epel-7-x86_64/enable = 1gpgcheck = 0$ yum install -y ansible-2.6.5 然后再用官方文档提供的源，装pyOpenSSL123$ yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm$ sed -i -e &quot;s/^enabled=1/enabled=0/&quot; /etc/yum.repos.d/epel.repo$ yum -y --enablerepo=epel install pyOpenSSL 克隆openshift-ansible代码，注意与编译的版本一致12$ cd ~$ git clone -b release-3.11 https://github.com/openshift/openshift-ansible.git 修改一下部署时要用到的源，加入我们自己编译rpm包后，做的那个仓库注意不要另外创建一个文件叫/etc/yum.repos.d/CentOS-OpenShift-Origin.repo.j2这个在部署过程中是会被覆盖的直接改openshift-ansible的代码里的j2模板文件就好文件后面的内容不变1234567$ cd openshift-ansible$ vim roles/openshift_repos/templates/CentOS-OpenShift-Origin.repo.j2[my-build-orgin-3.11]name = my-build-origin-3.11baseurl = http://192.168.64.132/repos/my-build-origin-3.11enabled = 1gpgcheck = 0 准备工作修改/etc/hosts，配置互信，修改/etc/ansible/hosts关于/etc/ansible/hosts里的配置项，可参考官方文档，按需添加123456789101112131415161718192021222324252627282930313233343536373839404142434445464748$ vim /etc/hosts127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4::1 localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.64.128 master.example.com192.168.64.129 infra.example.com192.168.64.130 node.example.com$ ssh-keygen$ ssh-copy-id master.example.com$ ssh-copy-id infra.example.com$ ssh-copy-id node.example.com$ vim /etc/ansible/hosts[OSEv3:vars]ansible_ssh_user=rootopenshift_deployment_type=origin# 跳过部分检查openshift_disable_check=disk_availability,docker_storage,memory_availability,docker_image_availability# service catalog相关openshift_hosted_etcd_storage_kind=nfsopenshift_hosted_etcd_storage_nfs_options=&quot;*(rw,root_squash,sync,no_wdelay)&quot;openshift_hosted_etcd_storage_nfs_directory=/opt/osev3-etcd openshift_hosted_etcd_storage_volume_name=etcd-vol2 openshift_hosted_etcd_storage_access_modes=[&quot;ReadWriteOnce&quot;]openshift_hosted_etcd_storage_volume_size=1Gopenshift_hosted_etcd_storage_labels=&#123;&apos;storage&apos;: &apos;etcd&apos;&#125;openshift_enable_unsupported_configurations=True# 使用firewalld作为防火墙服务os_firewall_use_firewalld=Trueopenshift_master_identity_providers=[&#123;&apos;name&apos;:&apos;htpasswd_auth&apos;,&apos;login&apos;:&apos;true&apos;,&apos;challenge&apos;:&apos;true&apos;,&apos;kind&apos;:&apos;HTPasswdPasswordIdentityProvider&apos;&#125;][masters]master.example.com[nodes]master.example.com openshift_node_group_name=&apos;node-config-master&apos;infra.example.com openshift_node_group_name=&apos;node-config-infra&apos;node.example.com openshift_node_group_name=&apos;node-config-compute&apos;[etcd]master.example.com[nfs]master.example.com 在每个节点上安装docker其实安装命令的第一条，会自动安装docker，但是为了提前配置加速器可以先手动安装docker，因为部署过程中，自动下载镜像会非常慢到那个时候就来不及配置加速器了，不过加速器有时候也作用不大……看网速吧在每个节点上都如下操作1234$ yum install -y docker-1.13.1$ vim /etc/docker/daemon.json &#123; &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]&#125;$ systemctl enable docker &amp;&amp; systemctl start docker 部署下面两条命令是在~/openshift-ansible目录下执行的，这样子会在/root/目录下生成openshift-ansible.log就不用自己再在/etc/ansible/ansible.cfg去配置日志输出目录了123$ ansible-playbook -i /etc/ansible/hosts playbooks/prerequisites.yml$ ansible-playbook -i /etc/ansible/hosts playbooks/deploy_cluster.yml]]></content>
      <categories>
        <category>openshift</category>
      </categories>
      <tags>
        <tag>openshift</tag>
        <tag>origin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F10%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
